/**
 * @packageDocumentation
 * @module Person
 */

import { Optional } from "sequelize";
import { Major } from "@/models/Major";
import { College } from "@/models/College";
import { DateTime } from "luxon";

export enum GenderEnum {
  Male = "Male",
  Female = "Female",
  None = "None",
}

/** The enum for the nine collges plus the option None */
export enum CollegeEnum {
  CC = "CC",
  UC = "UC",
  NA = "NA",
  SC = "SC",
  MC = "MC",
  SHHO = "SHHO",
  CW = "CW",
  WYS = "WYS",
  LWS = "LWS",
  GS = "GS",
  None = "None",
}

export enum MemberStatusEnum {
  /** for those who have not finished registration */
  Unactivated = "Unactivated",
  Activated = "Activated",
  Expired = "Expired",
}

export const NON_MEMBER_STATUS = MemberStatusEnum.Unactivated;

export enum RegistrationTypeEnum {
  New = "New",
  Renewal = "Renewal",
}

/** All the attributes in the Person model */
export interface PersonAttributes {
  id: number;
  /** The student id of the student */
  sid: string;
  chineseName: string | null;
  englishName: string;
  gender: GenderEnum | null;
  dateOfBirth: string | null;
  email: string | null;
  phone: string | null;
  college: CollegeEnum | College;
  /** The major program's code of the student */
  major: string | Major;
  /** The date that the student entered the university */
  dateOfEntry: string;
  expectedGraduationDate: string;
  /**
   * The date that the student became a member of the society \
   * Null for non-member
   */
  memberSince: string | null;
  /** The date that the membership expires, null for until grad */
  memberUntil: string | null;
  /** The status of the person */
  status: MemberStatusEnum;
  /** The type of the registration */
  registrationType: RegistrationTypeEnum | null;
}

/** All the timestamps auto generated by sequelize */
export type ModelTimestamps = {
  createdAt: Date;
  updatedAt: Date;
};

/** All the attributes stored in the database */
export type PersonModelAttributes = Omit<
  PersonAttributes,
  "status" | "registrationType"
> &
  ModelTimestamps;

/** All the attributes needed to create an instance of the Person model */
export type PersonCreationAttributes = Optional<
  Omit<PersonModelAttributes, "createdAt" | "updatedAt">,
  "id"
>;

/** All the attributes needed to update an instance of the Person model */
export type PersonUpdateAttributes = Partial<PersonModelAttributes> &
  Pick<PersonModelAttributes, "sid">;

/**
 * @returns The status of the person
 */
export const statusOf = (person: PersonModelAttributes): MemberStatusEnum => {
  if (!person.memberSince) {
    return MemberStatusEnum.Unactivated;
  }
  if (DateTime.fromISO(person.expectedGraduationDate) < DateTime.local()) {
    return MemberStatusEnum.Expired;
  }
  if (
    person.memberUntil &&
    DateTime.fromISO(person.memberUntil) < DateTime.local()
  ) {
    return MemberStatusEnum.Expired;
  }
  return MemberStatusEnum.Activated;
};

/**
 * @returns The type of the registration
 */
export const registrationTypeOf = (
  person: PersonModelAttributes
): RegistrationTypeEnum | null => {
  if (!person.memberSince) {
    return RegistrationTypeEnum.New;
  }
  if (
    person.memberUntil &&
    DateTime.fromJSDate(person.updatedAt) > DateTime.fromISO(person.memberUntil)
  ) {
    return RegistrationTypeEnum.Renewal;
  }
  return null;
};
